// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/song_data_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/alserok/music_lib/internal/service/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSongDataAPIClient is a mock of SongDataAPIClient interface.
type MockSongDataAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockSongDataAPIClientMockRecorder
}

// MockSongDataAPIClientMockRecorder is the mock recorder for MockSongDataAPIClient.
type MockSongDataAPIClientMockRecorder struct {
	mock *MockSongDataAPIClient
}

// NewMockSongDataAPIClient creates a new mock instance.
func NewMockSongDataAPIClient(ctrl *gomock.Controller) *MockSongDataAPIClient {
	mock := &MockSongDataAPIClient{ctrl: ctrl}
	mock.recorder = &MockSongDataAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSongDataAPIClient) EXPECT() *MockSongDataAPIClientMockRecorder {
	return m.recorder
}

// GetSongData mocks base method.
func (m *MockSongDataAPIClient) GetSongData(ctx context.Context, group, song string) (models.SongData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongData", ctx, group, song)
	ret0, _ := ret[0].(models.SongData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongData indicates an expected call of GetSongData.
func (mr *MockSongDataAPIClientMockRecorder) GetSongData(ctx, group, song interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongData", reflect.TypeOf((*MockSongDataAPIClient)(nil).GetSongData), ctx, group, song)
}
