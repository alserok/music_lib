// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/alserok/music_lib/internal/service/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateSong mocks base method.
func (m *MockRepository) CreateSong(ctx context.Context, song models.Song) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSong", ctx, song)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSong indicates an expected call of CreateSong.
func (mr *MockRepositoryMockRecorder) CreateSong(ctx, song interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSong", reflect.TypeOf((*MockRepository)(nil).CreateSong), ctx, song)
}

// DeleteSong mocks base method.
func (m *MockRepository) DeleteSong(ctx context.Context, songID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSong", ctx, songID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSong indicates an expected call of DeleteSong.
func (mr *MockRepositoryMockRecorder) DeleteSong(ctx, songID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSong", reflect.TypeOf((*MockRepository)(nil).DeleteSong), ctx, songID)
}

// EditSong mocks base method.
func (m *MockRepository) EditSong(ctx context.Context, song models.Song) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditSong", ctx, song)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditSong indicates an expected call of EditSong.
func (mr *MockRepositoryMockRecorder) EditSong(ctx, song interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditSong", reflect.TypeOf((*MockRepository)(nil).EditSong), ctx, song)
}

// GetSongText mocks base method.
func (m *MockRepository) GetSongText(ctx context.Context, songID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongText", ctx, songID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongText indicates an expected call of GetSongText.
func (mr *MockRepositoryMockRecorder) GetSongText(ctx, songID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongText", reflect.TypeOf((*MockRepository)(nil).GetSongText), ctx, songID)
}

// GetSongs mocks base method.
func (m *MockRepository) GetSongs(ctx context.Context, filter models.SongFilter) ([]models.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongs", ctx, filter)
	ret0, _ := ret[0].([]models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongs indicates an expected call of GetSongs.
func (mr *MockRepositoryMockRecorder) GetSongs(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongs", reflect.TypeOf((*MockRepository)(nil).GetSongs), ctx, filter)
}
